#!/bin/bash
#use "topfind";;(* -*- tuareg -*-


################################################################################
# This is a hackish file: it is both an ocaml file and shell script. When
# called check ocaml and ocamlfind are present and will then call
# itself back with ocaml.
#

#This function is used to emulate which on systems where it
#isn't installed
check_required (){
	if ! (type "$1" &> /dev/null); then
		echo "Couldn't find required binary \"$1\", failling.." > /dev/stderr
		exit 1
	fi
}
#This function checks the ocaml version in the path is the one returned by ocamlfind
check_path_coherence(){
    if test "$(ocamlc -where)" != "$(ocamlfind c -where)"; then
        echo "The binary ocamlc found in the PATH is not same as the one returned by ocamlfind" > /dev/stderr
        echo "Please fix your PATH or install ocamlfind with this version of ocaml" > /dev/stderr
        exit 1
    fi
}
#This function takes two arguments:the major and the minor expected version
check_ocaml_version(){
    OCV=`ocaml -version`
    OCV="${OCV##* }"
    MAJOR="${OCV%%.*}"
    REST="${OCV#*.}"
    MINOR="${REST%%.*}"
    if (test "$MAJOR" -lt $1) || ((test "$MAJOR" -eq $1) && (test "$MINOR" -lt $2));then
        echo "Your version of ocaml is too old to run this script." > /dev/stderr
        echo "You need ocaml $1.$2 or better..." > /dev/stderr
        exit 1
    fi
}
check_required "ocaml"
check_ocaml_version 3 10
check_required "ocamlfind"
check_path_coherence
exec ocaml $0 $@
#We use a here doc to comment out the whole Ocaml section
<<"OCAMLCODE_END"
*)
#require "unix"
#require "str"
#use "src/General.ml"

type caml_version=
  {major:int;
   minor:int
  }

let project_name="janus"
let version="0.alpha1"
let author="till.varoquaux"
let caml_expected={major=3;minor=10}

let version=ref version

let exe_name=Filename.basename Sys.argv.(0)
let root=
 if !Sys.interactive then
  "."
 else
  Filename.dirname Sys.argv.(0)

(**
   Wether this directory is under version control
*)
let isVcs=
 try Sys.is_directory (Filename.concat root "_darcs")
 with _ -> false

let vcsVersion () =
 let inv=(Filename.concat (Filename.concat root "_darcs") "inventory") in
 let f=Pervasives.open_in inv in
 let lastLine=ref "" in
 (try
   while true; do
    lastLine:=input_line f
   done
  with End_of_file ->
   Pervasives.close_in f);
 let s = !lastLine in
 (*The last line contains the date of the last commit...*)
 ignore (Str.string_match (Str.regexp ".*\\*\\*\\([0-9]*\\) *] *$") s 0);
 let rawDate=Str.matched_group 1 s in
 let yearStr=String.sub rawDate 0 4
 and monthStr=String.sub rawDate 4 2
 and dayStr=String.sub rawDate 6 2 in
 let is=int_of_string in
 (is yearStr),(is monthStr),((is dayStr)+1)

(**
   Checks wether a given filename is in the path
*)
let isInPath s=
 let path=
  Str.split (Str.regexp_string ":") (Sys.getenv "PATH")
 in
 List.exists (fun p -> Sys.file_exists (Filename.concat p s)) path

let dev=ref false
let debug=ref false
let dtypes=ref false
let setDev ()=
 dev:=true;
 debug:=true;
 dtypes:=true

let specs=
 Arg.align
  ["-dev",Arg.Unit setDev,"Sets up a developpement environement. Implies -debug and -dtypes";
   "-debug",Arg.Set debug,"Builds the target with debugging symbols";
   "-dtypes",Arg.Set debug,"Builds the target with -dtypes";
  ]
let usage=
 Printf.sprintf "'%s' configures this package.

Usage:%s [OPTION]

Where OPTION are in:" exe_name Sys.argv.(0)

let checking=
 Printf.printf "Checking %s... "

let warn=
 Printf.printf "Warning: %s!\n"

let error s=
 Printf.eprintf "Error: %s!\n" s;
 exit 1

let res s=
 Printf.printf "%s\n" s

let okfailed b=
 if b then
  res "ok"
 else
  (res "failed"; exit 1)

let yesno b=
 if b then
  res "yes"
 else
  res "no"

let ocaml_check expected=
 let got =
  Scanf.sscanf Sys.ocaml_version "%i.%i" (fun major minor ->
                                           {major=major;minor=minor})
 in
 checking "whether Ocaml version is recent enough";
 okfailed  ((expected.major > got.major) or
             (expected.major=got.major && expected.minor>=got.minor))

let checkDev bin targ=
 let res=isInPath bin in
 checking (Printf.sprintf "whether %s is installed" bin);
 yesno res;
 if not res then begin
   if !dev then
    error (Printf.sprintf "\"%s\" is required to hack the source code" bin)
   else
    warn (Printf.sprintf "disabling target:\"%s\"" targ)
 end;
 res

let fprintf_endline ch (f:(_,_,_)format)=
 Printf.kfprintf (fun ch -> output_char ch '\n') ch f

let rec generateSrcMakefile dir baseDir=
 (*
  * Call on all the subdirs
  *)
 let subdirs=Array.fold_left (Sys.readdir dir)
  ~f:(fun subDirs file ->
       let fullName=Filename.concat dir file in
       if (try Sys.is_directory fullName with _ -> false) then begin
        generateSrcMakefile fullName (Filename.concat ".." baseDir);
        file::subDirs
       end else
        subDirs
     )
  ~init:[]
 in
 with_open_out (Filename.concat root (Filename.concat dir "Makefile"))
  begin
   fun ch ->
    let (!) (f:(_,_,_) format)=fprintf_endline ch f in
    !"SHELL=/bin/sh";
    !"SUBDIRS=%s" (String.concat " " subdirs);
    !"BASEDIR=%s" baseDir;
    !"";
    !"all:";
    !"\t@$(MAKE) -C $(BASEDIR) $<";
    !"";
    !"include $(BASEDIR)/Makefile.common";
  end;;


let _ =
 Arg.parse specs (fun s ->raise(Arg.Bad (Printf.sprintf "Unknown arg \"%s\"..." s)))
  usage;
 ocaml_check {major=3;minor=10};
 let smjs=checkDev "smjs" "test"
 and darcs=checkDev "darcs" "dist"
 and lp4all=checkDev "lp4all" "doc" in
 checking "whether this is a snapshot";
 yesno isVcs;
 if isVcs then begin
  checking "repository version";
  let y,m,d=vcsVersion () in
  res (Printf.sprintf "%.2u/%.2u/%.4u" m d y);
  version:=Printf.sprintf "%s %.4u.%.2u.%.2u (darcs)" !version y m d
 end else begin
  if !dev then
   error "-dev only works on checked-out repositories"
 end;
 let debug,dev,dtypes,version = !debug,!dev,!dtypes,!version
 and cli = String.concat " " ((Array.to_list Sys.argv)) in
 with_open_out (Filename.concat root "Makefile")
  begin
   fun ch ->
    let (!) (f:(_,_,_) format)=fprintf_endline ch f
    and set varName cond = if cond then fprintf_endline ch  "%s=true" varName in
    !"CONFIGURE=%s" cli;
    set "LP4ALL" lp4all;
    set "SMJS" smjs;
    set "DARCS" darcs;
    set "DEBUG" debug;
    set "DEV" dev;
    set "DTYPES" dtypes;
    !"VERSION=%s" version;
    !"PROJECT_NAME=%s" project_name;
    !"TARGET=%s" project_name;
    !"include Makefile.in"
  end;
  with_open_out (Filename.concat root "Version.ml")
  begin
   fun ch ->
    let var name value = fprintf_endline ch "let %s = \"%s\"" name value in
    var "version" version;
    var "name" project_name;
    var "author" author;
    var "configure" cli
  end;
  generateSrcMakefile (Filename.concat root "src") ".." ;;
(*
OCAMLCODE_END
#*)
