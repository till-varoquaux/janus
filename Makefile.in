SHELL = /bin/sh
#Configurable options
SRC=Main
OCB=ocamlbuild -no-links -ocamlc "ocamlfind c" -ocamlopt "ocamlfind opt" -ocamldep "ocamlfind dep" -lflags "-package unix","-linkpkg"
#YACC=menhir
MODE=byte
#end configurable options
ALL=$(TARGET)
SUBDIRS=src

SRCDIRS=$(shell find src -type d)
OCB += $(patsubst %,-I %,$(SRCDIRS))

LP4ALLLIST=`darcs query manifest| sed -ne 's|^./src/||;tt;d;:t;/\.lp4all$$/d;p'`

BUILDDIR=_build

MISSING=${error Target disabled during configuration because "$1" was missing.}

ifdef DEBUG
	OCB += -lflag -g -cflag -g
else
	OCB += -cflag -noassert
#	OCB += -cflag -unsafe
endif

ifdef DTYPES
	OCB += -cflag -dtypes
	ALL += annot
endif

ifeq ($(TERM),dumb)
	OCB += -classic-display
endif

ifeq ($(YACC),menhir)
	OCB += -use-menhir -yaccflags --explain
else
	OCB += -yaccflags -v
endif

LIB=Js
LIBM=$(shell cat $(LIB).mllib)
LIBCMI=$(foreach a,$(LIBM),$(BUILDDIR)/src/$a.cmi)

ifdef DEV
	ALL += annot check
endif

all:$(ALL)

Makefile:configure
	${warning Your Makefile is too old, reruning configure...}
	@${CONFIGURE}

.PHONY:all clean opt dist doc check annot web lib_install sane

$(TARGET):sane
	${info * making $(MODE) code}
	@$(OCB) $(SRC).$(MODE)
	@cp $(BUILDDIR)/src/$(SRC).$(MODE) $(TARGET)

$(LIB).cma:sane
	$(info * making the bytecode library)
	@$(OCB) -lflag "-linkall" $@
	@find $(BUILDDIR) -name '$@' -exec cp '{}' $@ ';'

$(LIB).cmxa:sane
	$(info * making the native library)
	@$(OCB) -lflag "-linkpkg" $@
	@find $(BUILDDIR) -name '$@' -exec cp '{}' $@ ';'

lib:$(LIB).cma $(LIB).cmxa
lib_install:$(LIB).cma
	$(info * installing the library)
	@if (ocamlfind list|cut -d' ' -f1 | grep -q -F "$(PROJECT_NAME)")\
	 then ocamlfind remove "$(PROJECT_NAME)";\
	fi
	@ocamlfind install $(PROJECT_NAME) META  $(foreach cmi,$(shell cat $(LIB).mllib),$$(find $(BUILDDIR)/src -name "$(cmi).cmi")) $<

src/Changes.lp4all:
	${info * making the changelog}
ifndef DARCS
	${call MISSING,darcs}
else
	@ocaml Changelog.ml > $@
endif

doc:src/Changes.lp4all
	${info * making docs...}
ifndef LP4ALL
	${call MISSING,lp4all}
else
	@cd src;\
	lp4all -p "$(PROJECT_NAME)" -d ../doc $(LP4ALLLIST)
endif

check:$(TARGET)
	${info * runnning tests}
ifndef SMJS
	${call MISSING,smjs}
else
	@ocaml RunTests.ml ./$(TARGET)
endif

sane:
#Ocamlbuild has a nasty bug: it won't create the empty included directories
#this of course results in nasty errors...
	@$(foreach dir,$(SRCDIRS),mkdir -p "$(BUILDDIR)/$(dir)")
	@rm -f *.cma *.cmxa
	@find src -name "*.annot" -delete

annot:$(TARGET)
ifndef DTYPES
	${error You need to enable -dtypes during configuration}
else
	@cd $(BUILDDIR);\
find src -name "*.annot" -exec cp "{}" "../{}" ";"
endif


web:src/Changes.lp4all
	${info "updating web site"}
ifndef FTP_REPO
        ${error "You must have an environement variable FTP_REPO\
pointing towards the ftp repository where you want to \
upload the result"}
endif
	@rm -rf web
	@darcs get . --repo-name=web
	@cp src/Changes.lp4all web/src
	@cd web/src;\
        lp4all -p "$(PROJECT_NAME)" -d .. $(LP4ALLLIST)\
	rm -f sparsetable.py parsetable.py Changes.lp4all
	@cd web;\
	lftp -c "open $(FTP_REPO);\
          (cd $(PROJECT_NAME) || mkdir $(PROJECT_NAME));\
          cd $(PROJECT_NAME);\
          mirror -Renv --parallel=5"

clean::sane
	${info * cleaning up}
	@rm -rf web doc
	@rm -f *~ \#*
	@rm -f sanitize.sh
	@rm -f src/parsetab.py src/sparsetab.py src/Changes.lp4all $(TARGET)
	@$(OCB) -clean

distclean::clean
	@rm -f Version.ml

dist:
	${info * building a tarball}
ifndef DARCS
	${call MISSING,darcs}
else
	@darcs dist -d "$(PROJECT_NAME)-$(VERSION)"
endif

include Makefile.common
