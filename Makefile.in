SHELL = /bin/sh
#Configurable options
SRC=Main
OCB=ocamlbuild -no-links -ocamlc "ocamlfind c" -ocamlopt "ocamlfind opt" -ocamldep "ocamlfind dep" -lflags "-package unix","-linkpkg"
#YACC=menhir
MODE=byte
#end configurable options
ALL=$(TARGET)

BUILDDIR=_build

MISSING=${error Target disabled during configuration because "$1" was missing.}

ifdef DEBUG
	OCB += -cflag -g
else
	OCB += -cflag -noassert
#	OCB += -cflag -unsafe
endif

ifdef DTYPES
	OCB += -cflag -dtypes
	ALL += annot
endif

ifeq ($(TERM),dumb)
	OCB += -classic-display
endif

ifeq ($(YACC),menhir)
	OCB += -use-menhir -yaccflags --explain
else
	OCB += -yaccflags -v
endif
MLI=$(wildcard *.mli)

LIB=Js
LIBM=$(shell cat $(LIB).mllib)
LIBCMI=$(foreach a,$(LIBM),$(BUILDDIR)/$a.cmi)

ifdef DEV
	ALL += annot check
endif

all:$(ALL)

Makefile:configure
	${warning Your Makefile is too old, reruning configure...}
	@${CONFIGURE}

.PHONY:all clean opt dist doc check annot web lib_install

$(TARGET):sane
	${info * making $(MODE) code}
	@$(OCB) $(SRC).$(MODE)
	@cp $(BUILDDIR)/$(SRC).$(MODE) $(TARGET)

$(LIB).cma:sane
	$(info * making the bytecode library)
	@$(OCB) -lflag "-linkall" $@
	@cp $(BUILDDIR)/$@ $@

$(LIB).cmxa:sane
	$(info * making the native library)
	@$(OCB) $@
	@cp $(BUILDDIR)/$@ $@

lib:$(LIB).cma
lib_install:$(LIB).cma
	$(info * installing the library)
	@if (ocamlfind list|cut -d' ' -f1 | grep -q -F "$(PROJECT_NAME)")\
	 then ocamlfind remove "$(PROJECT_NAME)";\
	fi
	@ocamlfind install $(PROJECT_NAME) META $(LIBCMI) $<

Changes.lp4all:
	${info * making the changelog}
ifndef DARCS
	${call MISSING,darcs}
else
	@ocaml Changelog.ml > $@
endif

doc:Changes.lp4all
	${info * making docs...}
ifndef LP4ALL
	${call MISSING,lp4all}
else
	lp4all -p "$(PROJECT_NAME)" -d doc $$(darcs query manifest) Changes.lp4all
endif

check:$(TARGET)
	${info * runnning tests}
ifndef SMJS
	${call MISSING,smjs}
else
	@ocaml RunTests.ml ./$(TARGET)
endif

sane:
	@rm -f *.annot *.cma *.cmxa

annot:$(TARGET)
ifndef DTYPES
	${error You need to enable -dtypes during configuration}
else
	@cp _build/*.annot .
endif


web:Changes.lp4all
	${info "updating web site"}
ifndef FTP_REPO
        ${error "You must have an environement variable FTP_REPO\
pointing towards the ftp repository where you want to \
upload the result"}
endif
	@rm -rf web
	@darcs get . --repo-name=web
	@cp Changes.lp4all web
	@cd web;\
	lp4all -p "$(PROJECT_NAME)" $$(darcs query manifest) Changes.lp4all;\
	rm -f sparsetable.py parsetable.py;\
	lftp -c "open $(FTP_REPO);\
          (cd $(PROJECT_NAME) || mkdir $(PROJECT_NAME));\
          cd $(PROJECT_NAME);\
          mirror -Renv --parallel=5"

clean:sane
	${info * cleaning up}
	@rm -rf web doc
	@rm -f *~ \#* doc.odocl parsetab.py sparsetab.py Changes.lp4all $(TARGET)
	@$(OCB) -clean

distclean:clean
	@rm -f Makefile version.ml

dist:
	${info * building a tarball}
ifndef DARCS
	${call MISSING,darcs}
else
	@darcs dist -d "$(PROJECT_NAME)-$(VERSION)"
endif

